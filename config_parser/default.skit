default: {
    game: {
        points-to-win: 10,
        board: {
            radius: 3,
            chits: {
                types: [2, 3, 4, 5, 6, 8, 9, 10, 11, 12],
                distribution: uniform
            },
            tiles: {
                types: [{
                    name: "hills",
                    resource: {
                        card: game.cards.resource.brick,
                        count: 1
                    },
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.*,
                            count: 4
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "forest",
                    resource: {
                        card: game.cards.resource.lumber,
                        count: 1
                    },
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.*,
                            count: 4
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "mountains",
                    resource: {
                        card: game.cards.resource.ore,
                        count: 1
                    },
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.*,
                            count: 4
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "fields",
                    resource: {
                        card: game.cards.resource.grain,
                        count: 1
                    },
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.*,
                            count: 4
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "pasture",
                    resource: {
                        card: game.cards.resource.wool,
                        count: 1
                    },
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.*,
                            count: 4
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "desert"
                },
                {
                    name: "ocean"
                },
                {
                    name: "brick-harbor",
                    max-on-board: 1,
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.brick,
                            count: 2
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "lumber-harbor",
                    max-on-board: 1,
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.lumber,
                            count: 2
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "ore-harbor",
                    max-on-board: 1,
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.ore,
                            count: 2
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "grain-harbor",
                    max-on-board: 1,
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.grain,
                            count: 2
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "wool-harbor",
                    max-on-board: 1,
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.wool,
                            count: 2
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                },
                {
                    name: "any-harbor",
                    max-on-board: 4,
                    allow-exchange: {
                        sell: {
                            card: game.cards.resource.*,
                            count: 3
                        },
                        buy: {
                            card: game.cards.resource.*,
                            count: 1
                        }
                    }
                }],
                distribution: uniform
            }
        },
        cards: {
            development: {
                knight: {
                    description: "Move the robber. Steal 1 resource from the owner of a settlement or city adjacent to that robber's new hex.",
                    max-count: 14,
                    effect: {
                        when-played: func(board, player) {
                            player.cards.ongoing.development.knight += 1
                            position = player.prompt_for_tile()
                            board.move_robber(position)
                            target = player.prompt_choose_one(map(@(x) x.owner, filter(@(x) x.type == "settlement" or x.type == "city", board.get_structures(position))))
                            resource = random.choice(map(@(x) x[0], filter(@(x) x[1] != 0, target.cards.hand.resource.iteritems())))
                            player.cards.hand.resource[resource] += 1
                            player.cards.hand.resource[resource] -= 1
                        }
                    }
                },
                victory-point: {
                    description: "1 Victory Point!\nReveal this card on your turn if, with it, you reach the number of points required for victory.",
                    max-count: 5,
                    point-reward: 1
                },
                road-building: {
                    description: "Place 2 new roads as if you have just built them.",
                    max-count: 2,
                    effect: {
                        when-played: func(board, player) {
                            positions = [player.prompt_for_edge(), player.prompt_for_edge()]
                            for position := positions {
                                board.place_structure(main.game.structures.player-built.road, player, position)
                            }
                        }
                    }
                },
                year-of-plenty: {
                    description: "Take any 2 resources from the bank, add them in your hand. They can be 2 of the same resource or 2 different resources",
                    max-count: 2,
                    effect: {
                        when-played: func(bank, player) {
                            resources = [player.prompt_for_resource(), player.prompt_for_resource()]
                            for resource := resources {
                                player.cards.hand.resource[resource] += 1
                                bank.resource[resource] -= 1
                            }
                        }
                    }
                },
                monopoly: {
                    description: "When you play this card, announce 1 type of resource. All other players must give you all of their resources of that type.",
                    max-count: 2,
                    effect: {
                        when-played: func(players, player) {
                            resource = player.prompt_for_resource()
                            for target_player := players {
                                player.cards.hand.resource[resource] += target_player.cards.hand.resource[resource]
                                target_player.cards.hand.resource[resource] = 0
                            }
                        }
                    }
                }
            },
            development-cost: [{
                card: main.game.cards.resource.ore,
                count: 1
            },
            {
                card: main.game.cards.resource.wool,
                count: 1
            },
            {
                card: main.game.cards.resource.grain,
                count: 1
            }],
            special: {
                longest-road: {
                    description: "2 Victory Points!\nThis card goes to the player with the longest road of at least 5 segments. Another player who builds a longer road takes this card.",
                    max-count: 1,
                    criteria: func(players) {
                        longest_road = None
                        for player := players {
                            for road := player.structures.placed.road {
                            }
                        }
                    },
                    point-reward: 2
                },
                largest-army: {
                    description: "2 Victory Points!\nThe first player to play 3 knight cards gets this card. Another player who plays more knight cards takes this card.",
                    max-count: 1,
                    criteria: func(players) {
                        return sort(players, key=@(x) x.cards.ongoing.development.knight)
                    },
                    point-reward: 2
                }
            },
            resource: [{
                name: "brick",
                count: 19
            },
            {
                name: "lumber",
                count: 19
            },
            {
                name: "ore",
                count: 19
            },
            {
                name: "wool",
                count: 19
            },
            {
                name: "grain",
                count: 19
            }]
        },
        structures: {
            player-built: {
                road: {
                    building-cost: [{
                        card: main.game.cards.resource.brick,
                        count: 1
                    },
                    {
                        card: main.game.cards.resource.lumber,
                        count: 1
                    }],
                    max-count-per-player: 15,
                    constraints: {
                        placement-type: "edge",
                        adjacent-to: [
                            main.game.structures.player-built.road,
                            main.game.structures.player-built.settlement,
                            main.game.structures.player-built.city
                        ]
                    }
                },
                settlement: {
                    building-cost: [{
                        card: main.game.cards.resource.brick,
                        count: 1
                    },
                    {
                        card: main.game.cards.resource.lumber,
                        count: 1
                    },
                    {
                        card: main.game.cards.resource.wool,
                        count: 1
                    },
                    {
                        card: main.game.cards.resource.grain,
                        count: 1
                    }],
                    victory-point-value: 1,
                    max-count-per-player: 5,
                    constraints: {
                        placement-type: "corner",
                        adjacent-to: [
                            main.game.structures.player-built.road
                        ],
                        not-adjacent-to: [
                            main.game.structures.player-built.city
                        ]
                    },
                    effects: {
                        on-roll: func(dice_value, placementTiles, player) {
                            for placement := placementTiles {
                                if placement.chit == dice_value {
                                    player.cards.hand.resource[placement.resource.name] += placement.baseYield
                                }
                            }
                        }
                    }
                },
                city: {
                    building-cost: [{
                        card: main.game.cards.resource.ore,
                        count: 3
                    },
                    {
                        card: main.game.cards.resource.grain,
                        count: 2
                    }],
                    upgrade-of: main.game.structures.player-built.settlement,
                    victory-point-value: 2,
                    max-count-per-player: 4,
                    constraints: {
                        placement-type: "corner",
                        adjacent-to: [
                            main.game.structures.player-built.road
                        ],
                        not-adjacent-to: [
                            main.game.structures.player-built.settlement,
                            main.game.structures.player-built.city
                        ]
                    },
                    effects: {
                        on-roll: func(dice_value, placementTiles, player) {
                            for placement := placementTiles {
                                if placement.chit == dice_value {
                                    player.cards.hand.resource[placement.resource.name] += placement.baseYield * 2
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
